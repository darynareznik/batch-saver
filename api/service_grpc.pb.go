// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: api/service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BatchSaverServiceClient is the client API for BatchSaverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchSaverServiceClient interface {
	SaveEvents(ctx context.Context, opts ...grpc.CallOption) (BatchSaverService_SaveEventsClient, error)
}

type batchSaverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchSaverServiceClient(cc grpc.ClientConnInterface) BatchSaverServiceClient {
	return &batchSaverServiceClient{cc}
}

func (c *batchSaverServiceClient) SaveEvents(ctx context.Context, opts ...grpc.CallOption) (BatchSaverService_SaveEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BatchSaverService_ServiceDesc.Streams[0], "/batch_saver.BatchSaverService/SaveEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &batchSaverServiceSaveEventsClient{stream}
	return x, nil
}

type BatchSaverService_SaveEventsClient interface {
	Send(*SaveEventsRequest) error
	CloseAndRecv() (*SaveEventsResponse, error)
	grpc.ClientStream
}

type batchSaverServiceSaveEventsClient struct {
	grpc.ClientStream
}

func (x *batchSaverServiceSaveEventsClient) Send(m *SaveEventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *batchSaverServiceSaveEventsClient) CloseAndRecv() (*SaveEventsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatchSaverServiceServer is the server API for BatchSaverService service.
// All implementations must embed UnimplementedBatchSaverServiceServer
// for forward compatibility
type BatchSaverServiceServer interface {
	SaveEvents(BatchSaverService_SaveEventsServer) error
	mustEmbedUnimplementedBatchSaverServiceServer()
}

// UnimplementedBatchSaverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBatchSaverServiceServer struct {
}

func (UnimplementedBatchSaverServiceServer) SaveEvents(BatchSaverService_SaveEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveEvents not implemented")
}
func (UnimplementedBatchSaverServiceServer) mustEmbedUnimplementedBatchSaverServiceServer() {}

// UnsafeBatchSaverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchSaverServiceServer will
// result in compilation errors.
type UnsafeBatchSaverServiceServer interface {
	mustEmbedUnimplementedBatchSaverServiceServer()
}

func RegisterBatchSaverServiceServer(s grpc.ServiceRegistrar, srv BatchSaverServiceServer) {
	s.RegisterService(&BatchSaverService_ServiceDesc, srv)
}

func _BatchSaverService_SaveEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BatchSaverServiceServer).SaveEvents(&batchSaverServiceSaveEventsServer{stream})
}

type BatchSaverService_SaveEventsServer interface {
	SendAndClose(*SaveEventsResponse) error
	Recv() (*SaveEventsRequest, error)
	grpc.ServerStream
}

type batchSaverServiceSaveEventsServer struct {
	grpc.ServerStream
}

func (x *batchSaverServiceSaveEventsServer) SendAndClose(m *SaveEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *batchSaverServiceSaveEventsServer) Recv() (*SaveEventsRequest, error) {
	m := new(SaveEventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatchSaverService_ServiceDesc is the grpc.ServiceDesc for BatchSaverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchSaverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "batch_saver.BatchSaverService",
	HandlerType: (*BatchSaverServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveEvents",
			Handler:       _BatchSaverService_SaveEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/service.proto",
}
